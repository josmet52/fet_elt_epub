<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html>
<html xmlns:epub="http://www.idpf.org/2007/ops" xmlns="http://www.w3.org/1999/xhtml" xml:lang="fr" lang="fr">

<head>
    <title>
        Anim_cercle_trigo_et_valeur_instatanee_v1d
    </title>
    <script src="../Misc/anim_cercle_trigo_val_inst_v02_04.js" type="text/javascript">
    </script>
<style>
/*
Styles for the FET Electrotenique epub
used for the epub generated by the Publiwide paltform
and improved by the josmet python epub programm
*/
.fet_tableau_constantes{
    margin-left: 35px;
    border-collapse: collapse;
    font-family: comic sans ms;
    font-size: 14px;
}
.fet_tableau_constantes_entete{
    border: 1px solid black;
    padding: 5px;
    text-align: center;
    background-color: #cccccc
}
.fet_tableau_constantes_ligne{
    border: 1px solid black;
    padding: 5px;
    text-align: center;
    background-color: #f3f3f3
}

.fet_tableau {
    display: table;
    width: 100% ;
    margin: 1px;
    padding: 1px;
}
.fet_ligne {
	display: table-row;
	margin: 1px;
	padding: 1px;
}
.fet_cellule {
	display: table-cell;
	margin: 1px;
	padding: 10px;
	vertical-align: middle;
	text-align: left;
}
.fet_cellule_w60 {
	display: table-cell;
	width: 60% ;
	margin: 1px;
	padding: 10px;
	vertical-align: top;
	text-align: center;
}
.fet_cellule_w45 {
	display: table-cell;
	width: 45% ;
	margin: 1px;
	padding: 10px;
	vertical-align: top;
	text-align: center;
}
.fet_cellule_w35 {
	display: table-cell;
	width: 35% ;
	margin: 1px;
	padding: 10px;
	vertical-align: middle;
	text-align: center;
}
.fet_cellule_w28 {
	display: table-cell;
	width: 28% ;
	margin: 1px;
	padding: 10px;
	vertical-align: middle;
	text-align: center;
}
.fet_cellule_cadre_entete {
	display: table-cell;
	margin: 1px;
	padding: 10px;
	vertical-align: middle;
	text-align: left;
	border: 1px solid black;
	background-color: #c0c0c0;
	width: auto;
}
.fet_cellule_cadre_ligne {
	display: table-cell;
	margin: 1px;
	padding: 10px;
	vertical-align: middle;
	text-align: left;
	border: 1px solid black;
	background-color: #e0e0e0;
	width: auto;
}
/*P*/
p {
    font-family: comic sans ms;
    font-size: 14px;
    line-height: 20px;
    margin: 0 30px 3px 30px;
    font-style: normal;
    font-weight: normal;
    text-align: justify;
}
/*TOC*/
.fet_toc {
    font-family: comic sans ms;
    /*font-size: 14px;*/
    /*line-height: 22px;*/
    color: #000000;
    /*font-style:normal;*/
    /*font-weight:normal;*/
    /*padding-left :10px;*/
    /*margin: 0 30px 3px 30px;*/
}
ol {
	list-style-type:none;
    font-family: comic sans ms;
    font-size: 14px;
    font-weight: normal;
    padding-left: 10px;
    font-style: normal;
    text-align: justify;
    line-height: 20px;
    margin: 5px 0px 2px 30px;
}
ul {
    font-family: comic sans ms;
    font-size: 14px;
    font-weight: normal;
    padding-left: 30px;
    font-style: normal;
    text-align: justify;
    line-height: 20px;
    margin: 5px 0px 2px 30px;
    list-style-type: circle;
}
li {
    font-family: comic sans ms;
    /*font-size: 0.9em;*/
    font-size: 14px;
    /*font-weight: normal;*/
    /*line-height: 20px;*/
    /*margin: 0 30px 3px 30px;*/
    /*font-style: normal;*/
    /*text-align: justify;*/
}

.fet_exercices {
    list-style-type: decimal;
    line-height: 30px;
}

/*FORMULAS*/
.fet_formula {
    font-family: comic sans ms;
   font-size: larger;
   line-height: 40px;
   margin: 0px 0px 0px 35px;
   color: #000000;
   font-style: normal;
   font-weight: normal;
   padding: 10px 10px 10px 10px;
   display: inline-block;
   text-align: center;
   background-color: LightSalmon;
}
/* .fet_formula { */
    /* font-family:Times-Bold,sans-serif; */
    /* font-size:28px;	 */
    /* line-height:40px; */
    /* margin:0px 0px 0px 0px;	 */
    /* color:#A52A2A; */
/* } */

/*PERSONS*/
.fet_hominem {
    border-collapse: collapse;
    font-family: comic sans ms;
    font-size: 14px;
    line-height: 20px;
    margin-top: 0px;
    margin-bottom: 0px;
    margin-left: auto;
    margin-right: auto;
    text-align: justify;
    padding: 10px 30px 10px 30px;
    background-color: NavajoWhite
}

/*UNITS*/
.fet_unitatis {
    border-collapse: collapse;
    font-family: comic sans ms;
    font-size: 14px;
    line-height: 20px;
    margin-top: 0px;
    margin-bottom: 0px;
    margin-left: auto;
    margin-right: auto;
    width: 75% ;
    text-align: justify;
    background-color: LimeGreen;
}
</style>
<style>
.tableInvisible{border:none; border-collapse:collapse;}
a
{
	color:#000000;
	text-decoration:none;
	}
/*NORMAL TEXT*/
/* .navbar-ul */
/* { */
	/* list-style-type: none; */
	/* margin: 0; */
	/* padding: 0; */
	/* overflow: hidden; */
	/* background-color: #f3f3f3; */
	/* position: fixed; */
	/* top: 0; */
	/* width: 100%;  */
/* } */
.navbar-ul-top
{
    font-family: comic sans ms;
	list-style-type: none;
	margin: 0;
	padding: 0;
	overflow: hidden;
	background-color: #f3f3f3;
	position: fixed;
	top: 0;
	width: 100%;
}
.navbar-ul-bottom
{
    font-family: comic sans ms;
	list-style-type: none;
	margin: 0;
	padding: 0;
	overflow: hidden;
	background-color: #f3f3f3;
	position: fixed;
	bottom: 0;
	width: 100%;
}
h1
{
    font-family: comic sans ms;
    font-size:28px;	
	line-height:40px;
	margin:0px 0px 0px 0px;	
	color:#000000;
	font-style:normal;
	font-weight:normal;	
	padding: 10px 30px 10px 30px;
	background-color: #28bce1;
}
h1.reference{margin-bottom:50px}
h2, 
.h2
{
    font-family: comic sans ms;
    font-size:22px;	
	line-height:26px;
	margin:50px 30px 25px 30px;
	color:#000000;
	font-style:normal;
	font-weight:normal;
	background-color: #28bce1;
	padding:10px 10px 10px 10px;	
}



h3
{
    font-family: comic sans ms;
    font-size:20px;	
	line-height:22px;   
	margin:35px 30px 20px 30px;
	color:#000000;
	font-style:normal;
	font-weight:normal;	
	/*background-color: #28bce1;*/
    padding: 10px 10px 10px 10px;
	
}


h4
{
    font-family: comic sans ms;
    font-size:18px;	
	line-height:20px;   
	margin:35px 30px 15px 30px;
	color:#000000;
	font-style:normal;
	font-weight:bold;	
    padding: 10px 0px 10px 0px;
	
}

p.text
{
    font-family: comic sans ms;
    font-size:14px;	
	line-height:20px;
	margin:0 30px 3px 30px;
    font-style:normal;
	font-weight:normal;
	text-align:justify;
}
.p_figcaption
{
    font-family: comic sans ms;
    font-size:11px;	
	line-height:20px;
	margin:0 30px 3px 30px;
    font-style:normal;
	font-weight:normal;
	text-align:center;
}
.p_titre_en_petit
{
    font-family: comic sans ms;
    font-size:12px;	
    font-style:normal;
    font-weight:normal;
}
img{
	height:auto;
	width:auto;
	max-width:95%;
	max-height:95%;
	clip-path: inset(2px);
}


.imagecontainer {padding: 0; text-align: center; overflow: auto;margin:30px auto 5px auto;}
.imagecontainer.w50 {width:50%}
.imagecontainer.w80 {width:80%}
.copyright
{
    font-family: comic sans ms;
    font-size:14px;	
	margin:3px;
    font-style:normal;
	font-weight:normal;
	text-align:center;
}
</style>
<style>
.button,
.textarea,
.textareasin,
.textareacos,
.textareaangle,
.textareatension,
.textareaphi,
.textareaph1,
.textareaph2,
.textareaph3,
.canvas,
.btncheck,
.button-show,
.info-container, 
.info-txt-container, 
.info-container-in, 
.info-container-in-bottom, 
.slide-container,
.hidenbutton {
    font-family: comic sans ms;
	font-size: 14px;
}
.button,
.button-show,
.button_plus_minus ,
.button_plus_minus-space
{
	background-color: #c4c4c0; 
	border-color : #b2b29c;
	border-radius: 8px;
	border-style : solid;
	border-width : 1px;
	color: black;
	display: inline-block;
	font-size: 16px;
	margin: 5px 0px 5px 0px;
	text-align: center;
	text-decoration: none;
}
.button:hover {
	background-color: #ffffe0;
	cursor: pointer;
}
.button_plus_minus,
.button_plus_minus-space
 {
	font-weight: bold;
	font-size: 12px;
	width : 40px;
	border-radius: 4px;
	padding: 8px 8px 8px 8px;
	text-align: center;
    border: 1px solid black; 
}
.button_plus_minus:hover {
	background-color: #ffffe0;
	cursor: pointer;
}
.button_plus_minus-space:hover {
	background-color: #ffffe0;
	cursor: pointer;
}
.button_plus_minus-space
 {
	margin-left: 25px;
}		
.button-show {
    text-align: center;
    text-decoration: none;
    display: inline-block;
    cursor: pointer;
    background-color: white;
    color: black;
    margin: 0px 2px 0px 2px;
    padding: 8px 32px;
    border: 2px solid black; 
	border-radius: 8px;
}
.button-show:hover {
	background-color: grey;
	cursor: pointer;
}
.button-go {
	background-color: #b9b900; 
}
.btncheck
 {
	margin-left: 10px;
}		
.btncheck:hover {
	background-color: lightgray;
	cursor: pointer;
	}	
.textarea,
.textareasin,
.textareacos,
.textareaangle,
.textareatension,
.textareaphi,
.textareaph1,
.textareaph2,
.textareaph3,
.oscillo,
.canvas	{
	background-color: #ebfaff; 
	border-color : #2a7189;
	border-radius: 0px;
	border-style : solid;
	border-width : 1px;
	color: black;
	padding: 10px 1px;
	text-align: center;
	text-decoration: none;
	display: inline-block;
	font-size: 14px;
	margin: 2px 1px;
/*	float : left;
*/	cursor: default;
}
.textareasin,
.textareacos,
.textareaangle,
.textareatension,
.textareaphi,
.textareaph1,
.textareaph2,
.textareaph3{
	border-radius: 6px;
	margin: 3px 5px 0px 5px;
	padding: 10px 2px 10px 2px;
	vertical-align: middle;
	width: 90px;
}

.textareasin {
	color: #003bff;
	font-weight: bold;
	
}
.textareacos {
	color: #ff4500;
	font-weight: bold;
}
.textareaangle {
	color: #00baff;
	font-weight: bold;
}
.textareatension {
	color: black;
	font-weight: bold;
}
.textareaph1 {
	color: #ff4500;
	font-weight: bold;
}
.textareaph2 {
	color: #0a97ee;
	font-weight: bold;
}
.textareaph3 {
	color: #32cd32;
	font-weight: bold;
}
.textareaphi {
	color: black;
	font-weight: bold;
}
.canvas	{
	float : left;
}
.slide-container,
.info-container,
.info-txt-container,
.info-container-in {
	border-radius: 5px;
	background-color: #ebfaff;
	border : 1px #2a7189 solid;
	padding : 5px;
	width: 100px;
	margin : 2px;
	display: inline-block;
	text-align : center;
}
.slide-container {
	margin: 5px 0px 5px 0px;
	padding-top: 10px;
	width: auto;
	height: auto;
	background-color: lightblue;
}
.slider {
    width: 98%;
	height : 15px;
	padding-top: 0px;
	margin: 0px;
	background-color: gray;
    opacity: 0.6; 
}
.slider:hover {
	cursor: pointer;
	color : red;
    opacity: 1; 
}
.info-container {
	background-color: #d9e8d9; 
	width: auto;
}
.info-txt-container {
	background-color: white;
	width: auto;
	text-align: left;
	border: none;
    vertical-align: middle;
	padding : 0px;
	cursor : default;
	}
.info-container-in {
	background-color: #3a613a;
	width: auto;
	color : white;
	font-weight: bold;
	margin : 0px 0px 3px 0px;
}
.lbl-slider {
	padding : 5px 0px 0px 0px;
	margin: 0px;
	cursor : default;
}
.empty_space {
	width : 5px;
	border : none;
	display: inline-block;
}
.oscillo {
	border-radius: 10px;
}
.fet_tableau {
    display: table;
    /*width: 55% ;*/
    margin: 5px;
    padding: 0px;
}
.fet_ligne {
	display: table-row;
/*	margin: 0px;
*/	padding: 0px;
}

.fet_cellule,
.fet_cellule_canvas,
.fet_cellule_fap,
.fet_cellule_logo,
.fet_cellule_entree_valeurs,
.fet_cellule_comment,
.fet_cellule_oscillo,
.fet_cellule_cdes
 {
	display: table-cell;
	vertical-align: top;
	text-align: center;
	padding: 5px;
	padding-top: 20px;
	padding-bottom: 20px;
	/* width: 10%; */
	/*height: auto;*/
    /*border: 1px solid red;  */
    font-family: comic sans ms;
	font-size: 12px;
}
.fet_cellule_oscillo
 {
	padding: 0px;
	padding-top: 1px;
	padding-bottom: 1px;
}
.fet_cellule,
.fet_cellule_comment
{
    border: 1px solid blue;  
}
.fet_cellule
{
    border-left: 1px solid black;  
    border-right: 1px solid black;  
    /*border-collapse: collapse;*/
}
.fet_cellule + .fet_cellule
{
	border-left: none;
}
.fet_cellule_comment 
{
	padding-top: 2px;
	padding-bottom: 2px;
/*    border-top: 1px solid black;  
*/}
.fet_cellule_canvas {
/*	padding-left: 5px;
	padding-right: 5px;
*//*	margin-left: 30px;
	margin-right: 30px;
*/	vertical-align: top;
	text-align: left;
	padding-top: 5px;
	padding-bottom: 5px;
/*	width: auto; 
*/	/*border:2px solid #d3d3d3;	*/
	/*height: auto;*/
}
.fet_cellule_fap {
	vertical-align: top;
	padding-top: 20px;
	padding-bottom: 2px;
	padding-left: 40px;
	/*width: 30.5%;*/
}
.fet_cellule_logo {
	vertical-align: bottom;
	text-align: right;
	width: 5%;
	height: 5%;
}
.fet_cellule_entree_valeurs
 {
	text-align: center;
	width: 200px;
	height: auto;
/*	padding-left: 0px;
*/	/*border:1px solid gray;*/
	/*margin-left: 10px;*/
}
.fet_cellule_oscillo
{
    border: 1px solid orange;  
}
.fet_cellule_fap
{
    border: 1px solid yellow;  
}
.fet_cellule_cdes
{
    border: 1px solid magenta;  
}
.fet_cellule_canvas 
{
    border: 1px solid blue;  
}
.fet_ligne {
    border: 1px solid green;  
}
.fet_ligne {
    border: 1px solid green;  
}
.fet_tableau {
    border: 1px solid black;  
}
.fet_tableau + .fet_tableau {
    border: 0px ;  
}
.fet_cellule_oscillo,
.fet_cellule_fap,
.fet_cellule_logo,
.fet_cellule_cdes,
.fet_cellule_canvas,
.fet_ligne,
.fet_tableau
{
    border: 0px;  
}
.fet_cellule_cdes
{
	background-color: #e9e9ec;
    border-bottom: 1px solid black;  
    border-right: 1px solid black;  
    border-top: 1px solid black;  
	border-radius: 0px 10px 10px 0px;
	padding-left: 10px;
	padding-right:20px;
}
.fet_cellule_canvas 
{
	background-color: #e9e9ec;
    border-bottom: 1px solid black;  
    border-left: 1px solid black;  
    border-top: 1px solid black;  
	border-radius: 10px 0px 0px 10px;
	padding-right:5px;
}



</style>
</head>
<body>
    <h2>Cercle trigonométrique et/ou valeur instantanée d'un signal alternatif: animation</h2>
    <canvas id="canvas_id" width="550" height="200" class="canvas">
        Ho la la !!
        <br/>
        Malheureusement votre lecteur ne supporte pas Canvas ...  l'animation ne peut pas fonctionner.
        <br/>
    </canvas>
    <br/>
    <form>
        <div class="textareaangle" id="txt_deg">
            ɸ(deg)=0
        </div>
        <div class="textareasin" id="txt_sin">
            sin=0
        </div>
        <div class="textareacos" id="txt_cos">
            cos=1
        </div>
        <div class="textareatension" id="txt_tension">
            U=0V
        </div>
        <button class="button_plus_minus-space" type="button" onclick="btnStepMoinsMoins()">
            --
        </button>
        <button class="button_plus_minus" type="button" onclick="btnStepMoins()">
            -
        </button>
        <button class="button button-show" type="button" onclick="btnRun()">
            Go/Stop
        </button>
        <button class="button_plus_minus" type="button" onclick="btnStepPlus()">
            +
        </button>
        <button class="button_plus_minus" type="button" onclick="btnStepPlusPlus()">
            ++
        </button>
        <label class="btncheck" id="chk_label_id">
            Etiquettes
            <input type="checkbox" checked="" id="opt_etiquette_yesno" style="cursor: pointer;"/>
        </label>
        <label class="btncheck" id="chk_grid_id">
            Grille
            <input type="checkbox" checked="" id="opt_grille_yesno" style="cursor: pointer;"/>
        </label>
        <label class="btncheck" id="chk_tension_id">
            Tension
            <input type="checkbox" checked="" id="opt_tension_yesno" style="cursor: pointer;"/>
        </label>
        <label class="btncheck" id="chk_cos_trace_id">
            Cosinus
            <input type="checkbox" checked="" id="opt_cos_trace_yesno" style="cursor: pointer;"/>
        </label>
    </form>
        <script>
		
//************************** choix des options begin ***********************************
			
			var show_label = true;
            var show_grid = true;
            var show_line = true;
            var show_sin = true;
            var show_cos = true;
            var show_angle = true;
            var show_tension = false;
            var show_btn_check = true;
			var show_cos_trace = false;
//************************** choix des options end ***********************************			
			
			// Fonction appellée par le resize
			document.getElementsByTagName("body")[0].onresize = function() {onResizeActionTrigo()};
			
			// masquer ou afficher les checkbox 
			document.getElementById("chk_label_id").style.display = 'none'; // "none" = masqué, "inline" = visible
			document.getElementById("chk_grid_id").style.display = 'none'; // "none" = masqué, "inline" = visible
			document.getElementById("chk_tension_id").style.display = 'none'; // "none" = masqué, "inline" = visible
			document.getElementById("chk_cos_trace_id").style.display = 'inline'; // "none" = masqué, "inline" = visible
			
			// Fonctions appellées par les options
			document.getElementById("opt_etiquette_yesno").onchange = function() {optEtiquetteYesNo(this.checked)};
			document.getElementById("opt_etiquette_yesno").checked = show_label;
			document.getElementById("opt_grille_yesno").onchange = function() {optGrilleYesNo(this.checked)};
			document.getElementById("opt_grille_yesno").checked = show_grid;
			document.getElementById("opt_tension_yesno").onchange = function() {optTensionYesNo(this.checked)};
			document.getElementById("opt_tension_yesno").checked = show_tension;
			document.getElementById("opt_cos_trace_yesno").onchange = function() {optCosTraceYesNo(this.checked)};
			document.getElementById("opt_cos_trace_yesno").checked = show_cos_trace;
			
			const chk_grid = document.getElementById("chk_grid_id");
            const chk_tension = document.getElementById("chk_tension_id");
            const chk_label = document.getElementById("chk_label_id");
            const chk_cos_trace = document.getElementById("chk_cos_trace_id");

			if (show_btn_check){
				chk_grid.style.visibility = "visible";
				chk_tension.style.visibility = "visible";
				chk_label.style.visibility = "visible";
				chk_cos_trace.style.visibility = "visible";
			} else {
				chk_grid.style.visibility = "hidden";
				chk_tension.style.visibility = "hidden";
				chk_label.style.visibility = "hidden";
				chk_cos_trace.style.visibility = "hidden";
			}

			
		
			// récupérer les informations du canvas
            const canvas_element = document.getElementById("canvas_id");
            const ctx = canvas_element.getContext("2d");
			
			var w1 = canvas_element.width;
            var h1 = canvas_element.height;

            var r_width;
            var r_height;
            var r_base;
            var r_margin;

            var f_dim = 3.45; // grandeur de la zone de la courbe

            var anim_running = false;
            var stop_asked = false;
            var idVector;

            const axe_line_color = "#707070";
            const grid_color = "#eaeaea";
            const curve_line_color = "Black";
            const fill_circle_color = "AliceBlue";
            const fill_box_color = "#ffffe6"; //"LightYellow";
            const label_text_color = "black";

            const ph1_color = "#ff4500"; // OrangeRed
            const ph2_color = "#87cefa"; // LightSkyBlue
            const ph3_color = "#32cd32"; // LimeGreen

            const sin_cos_color = "#ff00ba";
            const cos_color = "#ff4500";
            const sin_color = "#003bff";
            const line_color = "#00baff";

			var r_zone ;
            var r_label;
            var r_axe;
            var r_circle;
            var l_width;
            var grad_len;
            var letter_height;
            var letter_style;
			
			// animation
			ph_deg = 0;
			ph_inc = 1;
			sleep_time = 100;
			
			// programme principal
			// ************************************************************************
			onResizeActionTrigo();
			RefreshGraphTrigo(ctx, r_zone, r_label, r_axe, r_circle, l_width, grad_len, letter_height, letter_style, ph_deg)
//<![CDATA[

// fonctions handling de l'animation
// ************************************************************************

function onResizeActionTrigo () {
	 // ajuster le canvas a la fenetre
	var scale_factor = 0.95;
	var w0 = parseInt(scale_factor * window.innerWidth);
	var h0 = parseInt(scale_factor * window.innerHeight);

    var rw = w0 / w1 ;
    var rh = h0 / h1 ;
    var r_scale_factor = 1;
    var r_scale;
	
	if (rw < rh) {
		r_scale = rw*r_scale_factor;
		if (r_scale*h1 > h0){
			r_scale = rh*r_scale_factor;
		}
	} else {
		r_scale = rh*r_scale_factor;
		if (r_scale*w1 > w0){
			r_scale = rw*r_scale_factor;
		}
	}
	r_width = w1*r_scale;
	r_height = h1*r_scale;

// dimensions de reference
	r_base = parseInt(r_height);
	r_margin = parseInt(r_base/28);

// dimension des éléments
	r_zone = parseInt(r_base/2);
	r_label = parseInt(r_zone - r_margin);
	r_axe = parseInt(r_zone - 2*r_margin);
	r_circle = parseInt(r_zone - 3*r_margin);
	l_width = (r_zone/200);
	grad_len = parseInt(r_zone/50);
	letter_height = parseInt(l_width*15);
	letter_style = letter_height + "px Helvetica";
	
	canvas_element.height = r_height;
	canvas_element.width = r_width;
	RefreshGraphTrigo(ctx, r_zone, r_label, r_axe, r_circle, l_width, grad_len, letter_height, letter_style, ph_deg);
	// debugPrint0("w0="+w0, "w1="+w1, "rw="+rw.toFixed(2), "h0="+h0, "h1="+h1, "rh="+rh.toFixed(2), "r_scale="+r_scale.toFixed(2));
	// debugPrint("r_base="+r_base, "r_margin="+r_margin,"r_zone="+r_zone, "r_label="+r_label, "r_axe="+r_axe, "r_circle="+r_circle, "l_width="+l_width, "grad_len="+grad_len, "letter_height="+letter_height, letter_style, ph_deg);
}

function RefreshGraphTrigo(ctx, r_zone, r_label, r_axe, r_circle, l_width, grad_len, letter_height, letter_style, ph_deg){
	// onResizeActionTrigo ();
	drawZone(ctx, r_zone);
	drawCircle(ctx, r_zone, r_label, r_axe, r_circle, l_width, grad_len, letter_height, letter_style);
	draw_sinus_trigo(ctx, r_zone, r_label, r_axe, r_circle, l_width, grad_len, letter_height, letter_style, ph_deg);
	draw_dot_line(ctx, r_zone, r_circle, grad_len, ph_deg);
	drawVecteur(ctx, r_zone, r_circle, grad_len, ph_deg);
	if (!show_tension) {
		document.getElementById("txt_tension").style.display = "none";
	} else {
		document.getElementById("txt_tension").style.display = "";
	}
	if (!show_sin) {
		document.getElementById("txt_sin").style.display = "none";
	} else {
		document.getElementById("txt_sin").style.display = "";
	}
	if (!show_cos) {
		document.getElementById("txt_cos").style.display = "none";
	} else {
		document.getElementById("txt_cos").style.display = "";
	}
	if (!show_angle) {
		document.getElementById("txt_deg").style.display = "none";
	} else {
		document.getElementById("txt_deg").style.display = "";
	}

	showValues(document, r_circle, ph_deg);
}

// fonctions de l'animation du cercle trigonometrique
// ************************************************************************

function drawZone(ctx, r_zone){
	
	ctx.lineWidth = l_width;
	// effacer tout
	ctx.translate(0, 0);
	ctx.beginPath();
	ctx.fillStyle = fill_circle_color; 
	ctx.fillRect(0, 0, 2*r_zone, 2.1*r_zone);
	ctx.fill();
	ctx.stroke();
	
	ctx.beginPath();
	ctx.fillStyle = fill_box_color; 
	ctx.fillRect(2*r_zone, 0, f_dim*r_zone, 2*r_zone);
	ctx.fill();
	
	ctx.beginPath();
	ctx.strokeStyle = axe_line_color; 
	ctx.rect(2*r_zone, 0, f_dim*r_zone, 2*r_zone);
	ctx.stroke();
	
}

function drawCircle(ctx, r_zone, r_label, r_axe, r_circle, l_width, grad_len, letter_height, letter_style){
	
	var x_center = r_zone;
	var y_center = r_zone;
	// dessiner le cercle
	// coordonnées du centre du cercle
	ctx.translate(x_center, y_center);
	ctx.beginPath();
	ctx.fillStyle = fill_box_color; //fill_circle_color; 
	ctx.strokeStyle = axe_line_color; 
	ctx.arc(0, 0, r_circle, 0, 2*Math.PI);
	// dessiner les axes
	drawArrow(ctx, 0, 0 , -r_axe, 0);
	drawArrow(ctx, 0, 0 , r_axe, 0);
	drawArrow(ctx, 0, 0 , 0, -r_axe);
	drawArrow(ctx, 0, 0 , 0, r_axe);
	// incrire les labels
	ctx.textStyle = label_text_color;
	ctx.fillStyle = label_text_color;
	ctx.font =  letter_style;
	ctx.textAlign = "center";
	ctx.fillText("x", r_label, +letter_height/4);
	ctx.fillText("-x", -r_label, +letter_height/4);
	ctx.fillText("y", 0, -r_label);
	ctx.fillText("-y", 0, r_label);
	ctx.fillStyle = fill_box_color; //fill_circle_color; 
	ctx.fill();
	// dessiner les graduations
	nbre_grad = 4;
	for (i=0; i<nbre_grad; i++){
		v = i+1;
		p = r_circle / nbre_grad * v;
		g = grad_len;
		//axe des abcisses
		ctx.moveTo(p,-g);
		ctx.lineTo(p,g);
		ctx.moveTo(-p,-g);
		ctx.lineTo(-p,g);
		// label des abcisses
	ctx.textStyle = label_text_color;
	ctx.fillStyle = label_text_color;
		if (show_label){
			ctx.textAlign = "center";
			ctx.fillText((v/nbre_grad), p, 4*grad_len);
			ctx.fillText((-v/nbre_grad), -p, 4*grad_len);
		}
		//axe des ordonnees
		ctx.moveTo(-g,p);
		ctx.lineTo(g,p);
		ctx.moveTo(-g,-p);
		ctx.lineTo(g,-p);
		if (show_label){
			ctx.textAlign = "left";
			ctx.fillText((-p, v/nbre_grad), 2*grad_len, p+letter_height/4);
			ctx.fillText((p, v/nbre_grad), 2*grad_len, -p+letter_height/4);
		}
	}
	ctx.stroke();
	ctx.translate(-x_center, -y_center);
}

function draw_sinus_trigo(ctx, r_zone, r_label, r_axe, r_circle, l_width, grad_len, letter_height, letter_style) {
	
	const r_margin = parseInt(r_zone/4);

    const x_zone = parseInt(r_zone * f_dim);
    const x_label = parseInt(r_label * f_dim);
    const x_axe = parseInt(r_axe * f_dim);
    const x_curve = parseInt(r_circle * f_dim);

    const y_zone = r_zone;
    const y_label = r_label*0.97;
    const y_axe = r_axe;
    const y_curve = r_circle;

    const x0_box = 2*r_zone;
    const y0_box = 0;
    const x1_box = 4*r_zone ;
    const y1_box = 2*r_zone;

    const x0_graph =  x0_box + r_margin;
    const y0_graph = -y0_box + r_zone;
    const x_min = 0;
    const y_min = 0;

	var i;

	// debugPrint1("r_margin="+r_margin, "xZone="+x_zone, "x_label="+x_label, "x_axe="+x_axe, "x_curve="+x_curve, "x0_box="+x0_box, "x1_box="+x1_box);
	
	// draw axes
	ctx.translate(x0_graph, y0_graph);
	ctx.beginPath();
	ctx.lineWidth = l_width;
	ctx.strokeStyle = axe_line_color; 
	ctx.textStyle = label_text_color;
	ctx.fillStyle = label_text_color;
	drawArrow(ctx, 0, 0, x_axe, 0);
	drawArrow(ctx, 0, 0, 0, -y_axe);
	drawArrow(ctx, 0, 0, 0, y_axe);

	// draw x graduations 
	ctx.font = letter_style;
	ctx.textAlign = "center";
	var nbre_grad = 8;
	for (i = 0; i<nbre_grad+1; i++) {
		var x_grad = (i) * x_curve / nbre_grad;
		ctx.moveTo(x_grad, -grad_len);
		ctx.lineTo(x_grad, grad_len);
		if (show_label){
			ctx.fillText(45 * i, x_grad, 4*grad_len);
		}
		if (show_grid){
			ctx.moveTo(x_grad, -y_curve);
			ctx.lineTo(x_grad, y_curve);
		}
	}
	ctx.moveTo(0, 0);
	ctx.stroke();

	// draw y graduations 
	ctx.beginPath();
	ctx.font = letter_style;
	ctx.textAlign = "right";
	for (i = -4; i != 5; i++) {
		var y_grad = i * y_curve / 4;
		ctx.moveTo(-grad_len, y_grad);
		ctx.lineTo(grad_len, y_grad);
		if (show_label){
			if (show_tension) {
				ctx.fillText((-0.25 * i * 230 * Math.sqrt(2)).toPrecision(3), - 2*grad_len, y_grad + grad_len / 2);
			} else {
				ctx.fillText(-0.25 * i, - 2*grad_len, y_grad + grad_len / 2);
			}
		}
		if (show_grid){
			ctx.moveTo(0, y_grad);
			ctx.lineTo(x_curve, y_grad);
		}
	}
	ctx.moveTo(0, 0);
	ctx.stroke();
	
	// draw labels
	ctx.beginPath();
	ctx.font = letter_style;
	ctx.textAlign = "center";
	// axe des ordonnées
	ctx.textAlign = "right";
	if (show_tension) {
		ctx.fillText("U [V]", 0, -y_label);
	}
	// axe des abcisses
	ctx.fillText("φ[º]", x_axe, 5*grad_len);

	// draw sinus
	var x_old = 0.0;
    var y_old = 0.0;
    var x_new = 0.0;
    var y_new = 0.0;
    var ph = 360;
	ctx.beginPath();
	ctx.lineWidth = l_width ;
	ctx.strokeStyle = sin_color;
	for (i = 0; i < ph; i++) {
		x_new = i * x_curve / 360;
		var y_rad = i * Math.PI / 180;
		var y_sin = -Math.sin(y_rad);
		y_new = y_sin * y_curve;
		ctx.moveTo(x_old, y_old);
		ctx.lineTo(x_new, y_new);
		x_old = x_new;
		y_old = y_new;
	}
	ctx.moveTo(0, 0);
	ctx.stroke();
	
	ctx.translate(-x0_graph, -y0_graph);
}
	
function draw_dot_line(ctx, r_zone, r_circle, grad_len, ph_deg){

	const r_margin = r_zone/4;

    const x0_graph =  2*r_zone + r_margin;
    const y0_graph =  r_zone;
    const x0_circle = x0_graph - r_zone - r_margin;
	
	var x_curve = r_circle * f_dim;
	var y_curve = r_circle;

	// get coordinates
	var ph_rad = ph_deg * Math.PI / 180;
	x_new = ph_deg * x_curve / 360;
	var y_sin = -Math.sin(ph_rad);
	var x_cos = -Math.cos(ph_rad);
	y_new = y_sin * y_curve;
	
	// draw dot on curve
	ctx.translate(x0_graph, y0_graph);
	ctx.beginPath();
	ctx.fillStyle = line_color;
	ctx.strokeStyle = line_color;
	ctx.arc(x_new, y_new, grad_len, 0, 2 * Math.PI);
	ctx.fill();
	
	// draw sin cos lines
	ctx.lineWidth = l_width;
	ctx.setLineDash([3]);
	ctx.moveTo(x_new, 0);
	ctx.lineTo(x_new, y_new);
	ctx.moveTo(x_new, y_new);
	var x_val;
	if (x_cos > 0){
		x_val = -r_margin -r_zone -x_cos * r_circle;
	} else {
		x_val = -r_margin -r_zone;
	}
	ctx.lineTo(x_val , y_new);
	ctx.moveTo(-r_margin -r_zone -x_cos * r_circle , y_new);
	ctx.lineTo(-r_margin -r_zone -x_cos * r_circle , 0);
	ctx.stroke();
	ctx.setLineDash([]);
	
	//draw dot on circle
	ctx.moveTo(-r_margin -r_zone- x_cos * r_circle , y_new);
	ctx.arc(-r_margin -r_zone -x_cos * r_circle , y_new, grad_len, 0, 2 * Math.PI);
	ctx.fill();
	
	
	ctx.moveTo(0, 0);
	ctx.translate(-x0_graph, -y0_graph);
}
	
function drawVecteur(ctx, r_zone, r_circle, grad_len, ph_deg){
	
	var x_center = r_zone;
	var y_center = r_zone;
	var r_measure = r_circle/3;

	// get coordinates
	var ph_rad = ph_deg * Math.PI / 180;
	var y_sin = -Math.sin(ph_rad);
	if (Math.abs(y_sin) < 0.001){
		y_sin = 0;
	}
	var x_cos = Math.cos(ph_rad);
	if (Math.abs(x_cos) < 0.001){
		x_cos = 0;
	}
	
	x_new = x_cos * r_circle;
	y_new = y_sin * r_circle;

	// coordonnées du centre du cercle
	ctx.translate(x_center, y_center);
	
	ctx.lineWidth = 2*l_width;
	ctx.strokeStyle = line_color;
	ctx.beginPath();
	ctx.moveTo(0, 0);
	//draw the vector
	drawArrow(ctx, 0,0, x_new, y_new);
	ctx.stroke();
	//draw the sin and cos line
	ctx.lineWidth = 1*l_width;
	ctx.beginPath();
	// draw the angle measure
	ctx.strokeStyle = line_color;
	ctx.textStyle = label_text_color;
	ctx.fillStyle = line_color;
	ctx.font = letter_style;
	if (ph_rad != 0) {
		ctx.arc(0, 0, r_measure, 0, 2*Math.PI-ph_rad, true);
		if (ph_rad > 0.25) {
			x_phi = Math.cos(ph_rad-0.25) * 1.2 * r_measure;
			y_phi = - Math.sin(ph_rad-0.25) * 1.2 * r_measure;
			ctx.fillText("φ", x_phi, y_phi);
		}
	}
	// draw the arrow for the angle measure
	// ctx.moveTo(Math.cos(ph_rad)*r_measure, -Math.sin(ph_rad)*r_measure);
	// var angle_arrow = ph_rad - Math.PI/6;
	// ctx.lineTo(Math.sin(angle_arrow),-Math.sin(ph_rad)*r_measure-10);
	
	// ctx.moveTo(Math.cos(ph_rad)*r_measure, -Math.sin(ph_rad)*r_measure);
	// ctx.lineTo(Math.cos(angle_arrow),Math.sin(ph_rad)*r_measure+10);
	
	ctx.arc(Math.cos(ph_rad)*r_measure, -Math.sin(ph_rad)*r_measure, grad_len, 0, 2*Math.PI, true);
	
	
	ctx.stroke();
	// ctx.beginPath();
	// ctx.strokeStyle = "yellow";
	// ctx.arc(0, 0, r_circle/3, ph_rad, 0, false);
	// ctx.stroke();
	
	
	// draw cos arrow
	ctx.beginPath();
	ctx.lineWidth = 3*l_width;
	ctx.strokeStyle = cos_color;
	if ((ph_deg != 90) && (ph_deg != 270)){
		drawArrow(ctx, 0,0, x_new, 0);
	}
	ctx.stroke();
	// draw sin arrow
	ctx.beginPath();
	ctx.strokeStyle = sin_color;
	if ((ph_deg != 0) && (ph_deg != 180) && (ph_deg != 360)){
		drawArrow(ctx, 0,0, 0, y_new);
	}
	ctx.stroke();
	ctx.translate(-x_center, -y_center);
}
	
function showValues(document, r_circle, ph_deg) {
	// get coordinates
	var ph_rad = ph_deg * Math.PI / 180;
	var y_sin = -Math.sin(ph_rad);
	if (Math.abs(y_sin) < 0.001){
		y_sin = 0;
	}
	var x_cos = Math.cos(ph_rad);
	if (Math.abs(x_cos) < 0.001){
		x_cos = 0;
	}
	document.getElementById("txt_deg").innerHTML = "φ = " + ph_deg.toPrecision(3)+ "˚";
	document.getElementById("txt_sin").innerHTML = "sinφ = " + -y_sin.toPrecision(3);
	document.getElementById("txt_cos").innerHTML = "cosφ = " + x_cos.toPrecision(3);
	document.getElementById("txt_tension").innerHTML = "U = " + (-y_sin*230*Math.sqrt(2)).toPrecision(3) +" V";
}

// fonctions boutons et checkbox
// ************************************************************************

// lancer la rotation automatique
function btnRun() {
	if (!anim_running) {
		idVector = setInterval(animateVector, sleep_time);
		anim_running = true;
	} else {
		stop_asked = true;
	}
}
// arreter la rotation automatique
function btnStop() {
	if (anim_running) {
		stop_asked = true;
	}
}
// fonction appelee par runMotor()
function animateVector() {
	RefreshGraphTrigo(ctx, r_zone, r_label, r_axe, r_circle, l_width, grad_len, letter_height, letter_style, ph_deg);
	ph_deg = (ph_deg+ph_inc)%360;
	if ((ph_deg%5 == 0) && stop_asked) {
		clearInterval(idVector);
		anim_running = false;
		stop_asked = false;
	}
}
// faire un pas dans le sens positif
function btnStepPlus() {
	if (!anim_running) {
		if (ph_deg == 360) {
			ph_deg = 0;
		} else {
			ph_deg = ph_deg + 1;
		}
		RefreshGraphTrigo(ctx, r_zone, r_label, r_axe, r_circle, l_width, grad_len, letter_height, letter_style, ph_deg);
	}
}
// faire un pas dans le sens positif
function btnStepPlusPlus() {
	if (!anim_running) {
		if (ph_deg == 360) {
			ph_deg = 0;
		} else {
			ph_deg = ph_deg + 5;
		}
		RefreshGraphTrigo(ctx, r_zone, r_label, r_axe, r_circle, l_width, grad_len, letter_height, letter_style, ph_deg);
	}
}
// faire un pas dans le sens negatif
function btnStepMoins() {
	if (!anim_running) {
		ph_deg = ph_deg - 1;
		if (ph_deg < 0) {
			ph_deg = 360;
		}
		RefreshGraphTrigo(ctx, r_zone, r_label, r_axe, r_circle, l_width, grad_len, letter_height, letter_style, ph_deg);
	}
}
// faire un pas dans le sens negatif
function btnStepMoinsMoins() {
	if (!anim_running) {
		ph_deg = ph_deg - 5;
		if (ph_deg < 0) {
			ph_deg = 360;
		}
		RefreshGraphTrigo(ctx, r_zone, r_label, r_axe, r_circle, l_width, grad_len, letter_height, letter_style, ph_deg);
	}
}
// afficher les etiquettes O/M 
function optEtiquetteYesNo(value){
    show_label = !!value;
	RefreshGraphTrigo(ctx, r_zone, r_label, r_axe, r_circle, l_width, grad_len, letter_height, letter_style, ph_deg);
}
	
// afficher les etiquettes O/M 
function optTensionYesNo(value){
    show_tension = !!value;
	RefreshGraphTrigo(ctx, r_zone, r_label, r_axe, r_circle, l_width, grad_len, letter_height, letter_style, ph_deg);
}
// aficher la grille O/N
function optGrilleYesNo(value){
   show_grid = !!value;
	RefreshGraphTrigo(ctx, r_zone, r_label, r_axe, r_circle, l_width, grad_len, letter_height, letter_style, ph_deg);
}

// fonctions utilitaires
// ************************************************************************

function drawArrow(ctx, fromx, fromy, tox, toy) {
	var headlen = 10; // length of head in pixels
	var angle = Math.atan2(toy - fromy, tox - fromx);
	ctx.moveTo(fromx, fromy);
	ctx.lineTo(tox, toy);
	ctx.lineTo(tox - headlen * Math.cos(angle - Math.PI / 6), toy - headlen * Math.sin(angle - Math.PI / 6));
	ctx.moveTo(tox, toy);
	ctx.lineTo(tox - headlen * Math.cos(angle + Math.PI / 6), toy - headlen * Math.sin(angle + Math.PI / 6));
}
//]]>
        </script>

<br/></body>
</html>

