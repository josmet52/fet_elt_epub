#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
fet_class.py
============
Cette classe contient toutes les procédures nécessaires au programme fet_main.py
Il doit se trouver dans le même directory que le programme fet_main.py
fichier : fet_class.py
utilisé par : fet_main.py
procédure de lancement : new_job
auteur : josmet
date : 21.06.2018
"""

import os
# import subprocess
# import time
# import tkinter as tk
# import uuid
# import zipfile
# import shutil
#
# from datetime import datetime
# from os import listdir
# from os import walk
# from os.path import isfile, join
# from shutil import copyfile
# from tkinter import *
# from tkinter import filedialog
# from tkinter import messagebox
# from PIL import Image
# from bs4 import BeautifulSoup
#
# from fet_lib import ClasseFetLib

class ClasseIni:
    """
        this class content all the fonctionnalities to improve the epub files generated by the Publiwide platform
            input :
                var_msg : to write message on the main window
                msg_list : listView where the messages are displayed
                msg_display : ref on the window where the message box is
            output :
                write the process steps in the information window
    """

    def __init__(self):

        self.INI_FILE_NAME = "fet_epub.ini"
        self.LOG_FILE_NAME = "fet_log.txt"

        # init variables
        self.cwd = "".join([str(os.getcwd()).replace("\\", "/").replace("\n", ""), "/"])
        self.org_path = ""
        self.new_path = ""
        self.tmp_path = ""
        self.new_nav_path = ""
        self.new_js_path = ""
        self.new_moo_path = ""
        self.new_police_path = ""
        self.js_css_path = ""
        self.log_path = "".join([self.cwd, "log/"])
        self.log_path_file_name = "".join([self.log_path, self.LOG_FILE_NAME])
        self.strings_names_js = []
        self.strings_names_css = []
        self.mandatory_names_js = []
        self.mandatory_names_css = []
        self.DEBUG = False
        self.LOG_THIS_RUN = False

        # lecture des répertoires dans le fichier .ini
        self.ini_path_file_name = "".join([self.cwd, self.INI_FILE_NAME])
        if os.path.isfile(self.ini_path_file_name):

            with open(self.ini_path_file_name, "r", encoding="utf-8") as f_init:
                r = f_init.readlines()
                for p in r:
                    x = p.split("=")
                    x[0] = x[0].strip().lower()
                    if len(x) > 1 :
                        x[1] = x[1].strip().lower()

                        # ne pas traiter les commentaires
                        if x[0][:1] != "#":

                            if x[0] == "short_strings_names_js":
                                x_js = x[1].split(" ")
                                for x_js_strings in x_js:
                                    self.strings_names_js.append(x_js_strings)

                            if x[0] == "short_strings_names_css":
                                x_css = x[1].split(" ")
                                for x_css_strings in x_css:
                                    self.strings_names_css.append(x_css_strings)

                            if x[0] == "short_mandatory_files_js":
                                x_js = x[1].split(" ")
                                for x_js_strings in x_js:
                                    self.mandatory_names_js.append(x_js_strings)

                            if x[0] == "short_mandatory_files_css":
                                x_css = x[1].split(" ")
                                for x_css_strings in x_css:
                                    self.mandatory_names_css.append(x_css_strings)

                            if x[0] == "ini_org_dir":
                                self.org_path = "".join([x[1].replace("\"", ""), "/"]).replace("\n", "").replace(" ",
                                                    "").replace("//", "/")

                            elif x[0] == "ini_new_dir":
                                self.new_path = "".join([x[1].replace("\"", ""), "/"]).replace("\n", "").replace(" ",
                                                    "").replace("//", "/")

                            elif x[0] == "ini_tmp_dir":
                                self.tmp_path = "".join([x[1].replace("\"", ""), "/"]).replace("\n", "").replace(" ",
                                                    "").replace("//", "/")

                            elif x[0] == "ini_new_nav_dir":
                                self.new_nav_path = "".join([x[1].replace("\"", ""), "/"]).replace("\n", "").replace(" ",
                                                    "").replace("//", "/")

                            elif x[0] == "ini_new_js_css_dir":
                                self.new_js_path = "".join([x[1].replace("\"", ""), "/"]).replace("\n", "").replace(" ",
                                                    "").replace("//", "/")

                            elif x[0] == "ini_new_moodle_dir":
                                self.new_moo_path = "".join([x[1].replace("\"", ""), "/"]).replace("\n", "").replace(" ",
                                                    "").replace("//", "/")

                            elif x[0] == "ini_new_police_dir":
                                self.new_police_path = "".join([x[1].replace("\"", ""), "/"]).replace("\n", "").replace(" ",
                                                    "").replace("//", "/")

                            elif x[0] == "ini_js_css_ok_dir":
                                self.js_css_path = "".join([x[1].replace("\"", ""), "/"]).replace("\n", "").replace(" ",
                                                    "").replace("//", "/")

                            elif x[0] == "ini_var_debug" :
                                if x[1].replace("\n", "") == "true" : self.DEBUG = True
                                else : self.DEBUG = False

                            elif x[0] == "ini_var_log_this_run" :
                                if x[1].replace("\n", "") == "true" : self.LOG_THIS_RUN = True
                                else : self.LOG_THIS_RUN = False

                            elif x[0] == "ini_var_verbose" :
                                if x[1].replace("\n", "") == "true" : self.VERBOSE = True
                                else : self.VERBOSE = False

                            elif x[0] == "ini_var_with_dir" :
                                if x[1].replace("\n", "") == "true" : self.WITH_DIR = True
                                else : self.WITH_DIR = False

                            elif x[0] == "ini_var_with_zip" :
                                if x[1].replace("\n", "") == "true" : self.WITH_ZIP = True
                                else : self.WITH_ZIP = False

                            elif x[0] == "ini_var_img_size_max" :
                                if x[1].isnumeric() : self.IMG_SIZE_MAX = int(x[1])
                                else : self.IMG_SIZE_MAX = 20000

                            elif x[0] == "ini_var_toc_deep" :
                                self.TOC_DEEP = x[1]

                            elif x[0] == "ini_var_font" :
                                self.FONT_NAME = x[1]

                            elif x[0] == "ini_var_verif_epub" :
                                if x[1].replace("\n", "") == "true" : self.VERIF_EPUB = True
                                else : self.VERIF_EPUB = False
    def abcde(self):
        abcde = 0
